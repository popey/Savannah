# Generated by Django 3.1 on 2025-04-11 10:53

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('icon_name', models.CharField(blank=True, max_length=256, null=True)),
                ('short_description', models.CharField(max_length=256)),
                ('long_description', models.CharField(max_length=256)),
                ('location', models.URLField(blank=True, max_length=512, null=True)),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('name', models.CharField(max_length=256)),
                ('oldest_import', models.DateTimeField(blank=True, null=True)),
                ('first_import', models.DateTimeField(blank=True, null=True)),
                ('last_import', models.DateTimeField(blank=True, null=True)),
                ('import_failed_attempts', models.SmallIntegerField(default=0)),
                ('import_failed_message', models.CharField(blank=True, max_length=256, null=True)),
                ('last_tagged', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Community Name')),
                ('logo', models.ImageField(blank=True, help_text='Will be resized to a 32x32px icon.', null=True, upload_to='community_logos', verbose_name='Community Icon')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(choices=[(0, 'Setup'), (1, 'Active'), (2, 'Suspended'), (3, 'Deactive'), (4, 'Archived'), (5, 'Demonstration'), (6, 'Development')], default=0)),
                ('suggest_tag', models.BooleanField(default=True, help_text='Suggest new Tags based on Conversation text')),
                ('suggest_company', models.BooleanField(default=True, help_text='Suggest new Companies based on email addresses')),
                ('suggest_merge', models.BooleanField(default=True, help_text='Suggest merging accounts belonging to the same person')),
                ('suggest_contribution', models.BooleanField(default=True, help_text='Suggest Contributions based on Conversation text')),
                ('suggest_task', models.BooleanField(default=True, help_text='Suggest Tasks to help engage with your Members')),
                ('inactivity_threshold_previous_activity', models.PositiveSmallIntegerField(default=50, help_text='Amount of previous activity required before you will be notified that a member has become inactive.')),
                ('inactivity_threshold_previous_days', models.PositiveSmallIntegerField(default=90, help_text='Number of days into the past to check for activity to meet the notification threshold')),
                ('inactivity_threshold_days', models.PositiveSmallIntegerField(default=30, help_text='Number of days of inactivity before triggering a notification')),
                ('resuming_threshold_previous_activity', models.PositiveSmallIntegerField(default=20, help_text='Amount of previous activity required before you will be notified that an inactive member had become active again')),
                ('resuming_threshold_previous_days', models.PositiveSmallIntegerField(default=90, help_text='Number of days into the past to check for activity to meet the notification threshold')),
                ('resuming_threshold_days', models.PositiveSmallIntegerField(default=30, help_text='Number of days of inactivity before triggering a notification on new activity')),
                ('managers', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.group')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('website', models.URLField(blank=True, max_length=512, null=True)),
                ('icon_url', models.URLField(blank=True, max_length=512, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Treat members as staff')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('title', models.CharField(max_length=256)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('location', models.URLField(blank=True, max_length=512, null=True)),
            ],
            options={
                'verbose_name_plural': 'Contributions',
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='ContributionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('feed', models.URLField(blank=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'verbose_name': 'Contribution Type',
                'verbose_name_plural': 'Contribution Types',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('location', models.URLField(blank=True, max_length=512, null=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.channel')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('contribution', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversation', to='corm.contribution')),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_timestamp', models.DateTimeField(db_index=True)),
                ('end_timestamp', models.DateTimeField()),
                ('location', models.URLField(blank=True, max_length=512, null=True, verbose_name='Event URL')),
                ('impact', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.channel')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'verbose_name_plural': 'Events',
                'ordering': ('start_timestamp',),
            },
        ),
        migrations.CreateModel(
            name='ImpactReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('start_timestamp', models.DateTimeField()),
                ('impact_score', models.IntegerField(default=0)),
                ('impact_1d', models.IntegerField(default=0)),
                ('impact_7d', models.IntegerField(default=0)),
                ('impact_15d', models.IntegerField(default=0)),
                ('impact_30d', models.IntegerField(default=0)),
                ('impact_60d', models.IntegerField(default=0)),
                ('impact_90d', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('start_timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('first_seen', models.DateTimeField(db_index=True)),
                ('last_seen', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('mailing_address', models.CharField(blank=True, max_length=256, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True)),
                ('avatar_url', models.URLField(blank=True, max_length=512, null=True)),
                ('role', models.CharField(choices=[('community', 'Community'), ('staff', 'Staff'), ('bot', 'Bot')], default='community', max_length=32)),
                ('auto_update_name', models.BooleanField(default=True, verbose_name='Auto Update Name')),
                ('auto_update_role', models.BooleanField(default=True, verbose_name='Auto Update Role')),
                ('auto_update_company', models.BooleanField(default=True, verbose_name='Auto Update Company')),
                ('auto_update_email', models.BooleanField(default=True, verbose_name='Auto Update Email Address')),
                ('auto_update_avatar', models.BooleanField(default=True, verbose_name='Auto Update Avatar')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.company')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MemberConnection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_connected', models.DateTimeField(db_index=True)),
                ('last_connected', models.DateTimeField(db_index=True)),
                ('connection_count', models.PositiveIntegerField(default=1)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('from_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.member')),
                ('to_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connectors', to='corm.member')),
            ],
            options={
                'ordering': ('-first_connected',),
            },
        ),
        migrations.CreateModel(
            name='Opportunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField()),
                ('status', models.SmallIntegerField(choices=[(-2, 'Rejected'), (-1, 'Declined'), (0, 'Identified'), (1, 'Proposed'), (2, 'Agreed'), (3, 'Submitted'), (4, 'Complete')], default=0)),
                ('deadline', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('activities', models.ManyToManyField(blank=True, null=True, related_name='opportunities', to='corm.Activity')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opportunities_closed', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opportunities', to='corm.community')),
                ('contribution_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opportunities', to='corm.contributiontype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opportunities_created', to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opportunities', to='corm.member')),
            ],
            options={
                'verbose_name_plural': 'Opportunities',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('default_project', models.BooleanField(default=False)),
                ('joined_start', models.DateTimeField(blank=True, help_text="Any activity by a member first seen after this date will have their activity included in this segment's activity", null=True)),
                ('joined_end', models.DateTimeField(blank=True, help_text="Any activity by a member first seen before this date will have their activity included in this segment's activity", null=True)),
                ('threshold_period', models.SmallIntegerField(default=365, help_text='Timerange in days to look at for level activity', verbose_name='Activity Period')),
                ('threshold_user', models.SmallIntegerField(default=1, help_text='Number of conversations needed to become a Visitor', verbose_name='Visitor level')),
                ('threshold_participant', models.SmallIntegerField(default=3, help_text='Number of conversations needed to become a Participant', verbose_name='Participant level')),
                ('threshold_contributor', models.SmallIntegerField(default=1, help_text='Number of contributions needed to become a Contributor', verbose_name='Contributor level')),
                ('threshold_core', models.SmallIntegerField(default=5, help_text='Number of contributions needed to become a Core Contributor', verbose_name='Core level')),
                ('channels', models.ManyToManyField(blank=True, help_text="Any activity in these channels will be included in this segment's activity", to='corm.Channel')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connector', models.CharField(choices=[('corm.plugins.null', 'Manual Entry'), ('corm.plugins.api', 'API'), ('corm.plugins.discord', 'Discord'), ('corm.plugins.discourse', 'Discourse'), ('corm.plugins.github', 'Github'), ('corm.plugins.gitlab', 'Gitlab'), ('corm.plugins.facebook', 'Facebook'), ('corm.plugins.ical', 'iCal'), ('corm.plugins.meetup', 'Meetup'), ('corm.plugins.reddit', 'Reddit'), ('corm.plugins.rss', 'RSS'), ('corm.plugins.slack', 'Slack'), ('corm.plugins.stackexchange', 'Stack Exchange'), ('corm.plugins.salesforce', 'Salesforce')], max_length=256)),
                ('name', models.CharField(max_length=256)),
                ('server', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_id', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_secret', models.CharField(blank=True, max_length=1024, null=True)),
                ('api_key', models.CharField(blank=True, max_length=256, null=True)),
                ('icon_name', models.CharField(blank=True, max_length=256, null=True)),
                ('first_import', models.DateTimeField(blank=True, null=True)),
                ('last_import', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('import_failed_attempts', models.SmallIntegerField(default=0)),
                ('import_failed_message', models.CharField(blank=True, max_length=256, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('color', models.CharField(max_length=16)),
                ('keywords', models.CharField(blank=True, help_text='Comma-separated list of words. If found in a conversation, this tag will be applied.', max_length=256, null=True)),
                ('last_changed', models.DateTimeField(auto_now_add=True, null=True)),
                ('connector', models.CharField(blank=True, choices=[('corm.plugins.null', 'Manual Entry'), ('corm.plugins.api', 'API'), ('corm.plugins.discord', 'Discord'), ('corm.plugins.discourse', 'Discourse'), ('corm.plugins.github', 'Github'), ('corm.plugins.gitlab', 'Gitlab'), ('corm.plugins.facebook', 'Facebook'), ('corm.plugins.ical', 'iCal'), ('corm.plugins.meetup', 'Meetup'), ('corm.plugins.reddit', 'Reddit'), ('corm.plugins.rss', 'RSS'), ('corm.plugins.slack', 'Slack'), ('corm.plugins.stackexchange', 'Stack Exchange'), ('corm.plugins.salesforce', 'Salesforce')], max_length=256, null=True)),
                ('editable', models.BooleanField(default=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='WebHook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('event', models.CharField(db_index=True, max_length=64, verbose_name='Event')),
                ('target', models.URLField(max_length=255, verbose_name='Target URL')),
                ('secret', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('enabled', models.BooleanField(default=True)),
                ('send_failed_attempts', models.SmallIntegerField(default=0)),
                ('send_failed_message', models.CharField(blank=True, max_length=512, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='WebHookEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('event', models.CharField(max_length=256)),
                ('payload', models.JSONField()),
                ('send_failed_attempts', models.SmallIntegerField(default=0)),
                ('send_failed_message', models.CharField(blank=True, max_length=512, null=True)),
                ('success', models.BooleanField(default=False)),
                ('hook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='corm.webhook')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='WebHookEventLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(blank=True, null=True)),
                ('response', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log', to='corm.webhookevent')),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='UserAuthCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connector', models.CharField(choices=[('corm.plugins.null', 'Manual Entry'), ('corm.plugins.api', 'API'), ('corm.plugins.discord', 'Discord'), ('corm.plugins.discourse', 'Discourse'), ('corm.plugins.github', 'Github'), ('corm.plugins.gitlab', 'Gitlab'), ('corm.plugins.facebook', 'Facebook'), ('corm.plugins.ical', 'iCal'), ('corm.plugins.meetup', 'Meetup'), ('corm.plugins.reddit', 'Reddit'), ('corm.plugins.rss', 'RSS'), ('corm.plugins.slack', 'Slack'), ('corm.plugins.stackexchange', 'Stack Exchange'), ('corm.plugins.salesforce', 'Salesforce')], max_length=256)),
                ('server', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_id', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_secret', models.CharField(blank=True, max_length=1024, null=True)),
                ('auth_refresh', models.CharField(blank=True, max_length=1024, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('mime_type', models.CharField(blank=True, max_length=64, null=True)),
                ('record_length', models.PositiveIntegerField(default=0)),
                ('header', models.CharField(blank=True, max_length=512, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_to', models.FileField(upload_to='')),
                ('mapping', models.JSONField(default={})),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Uploaded'), (1, 'Pending'), (2, 'Processing'), (3, 'Complete'), (4, 'Failed'), (5, 'Canceled')], default=0)),
                ('status_msg', models.CharField(blank=True, max_length=256, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.event')),
                ('import_tag', models.ForeignKey(blank=True, help_text='Tag all Members in this file', null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.tag')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.source')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('detail', models.TextField(blank=True, null=True)),
                ('due', models.DateTimeField()),
                ('done', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.conversation')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.project', verbose_name='Segment')),
                ('stakeholders', models.ManyToManyField(to='corm.Member')),
                ('tags', models.ManyToManyField(blank=True, to='corm.Tag')),
            ],
            options={
                'ordering': ('done', 'due'),
            },
        ),
        migrations.CreateModel(
            name='SuggestTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('due_in_days', models.SmallIntegerField(default=0)),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_suggestions', to='corm.project', verbose_name='Segment')),
                ('stakeholder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_suggestions', to='corm.member')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('keyword', models.CharField(max_length=50)),
                ('score', models.SmallIntegerField(default=0)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestMemberTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('suggested_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_suggestions', to='corm.tag')),
                ('target_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_suggestions', to='corm.memberconnection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestMemberMerge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('destination_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merge_with_suggestions', to='corm.member')),
                ('source_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merge_to_suggestions', to='corm.member')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestConversationTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('suggested_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversation_suggestions', to='corm.tag')),
                ('target_conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_suggestions', to='corm.conversation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestConversationAsContribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=256)),
                ('score', models.SmallIntegerField(default=0)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('activity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contribution_suggestions', to='corm.activity')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('contribution_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contribution_suggestions', to='corm.contributiontype')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contribution_suggestions', to='corm.conversation')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contribution_suggestions', to='corm.source')),
            ],
            options={
                'ordering': ('-conversation__timestamp',),
            },
        ),
        migrations.CreateModel(
            name='SuggestCompanyCreation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'Accepted'), (0, 'Ignored'), (-1, 'Rejected')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actioned_at', models.DateTimeField(blank=True, null=True)),
                ('domain', models.CharField(max_length=256)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('name', models.CharField(max_length=256)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='corm.company')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('report_type', models.SmallIntegerField(choices=[(0, 'Growth'), (1, 'Annual')])),
                ('generated', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('data', models.TextField(null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('title', models.CharField(max_length=256)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('location', models.URLField(blank=True, max_length=512, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('impact', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.channel')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.conversation')),
                ('promoters', models.ManyToManyField(to='corm.Member')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.source')),
                ('tags', models.ManyToManyField(blank=True, to='corm.Tag')),
            ],
            options={
                'verbose_name_plural': 'Promotions',
                'ordering': ('-timestamp',),
            },
        ),
        migrations.AddField(
            model_name='project',
            name='member_tag',
            field=models.ForeignKey(blank=True, help_text="Any activity by a member with this tag will be included in this segment's activity", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects_by_member', to='corm.tag', verbose_name='Member tag'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_projects', to='corm.member'),
        ),
        migrations.AddField(
            model_name='project',
            name='tag',
            field=models.ForeignKey(blank=True, help_text="Any content with this tag will be included in this segment's activity", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects_by_content', to='corm.tag', verbose_name='Content tag'),
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('community', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participation', to='corm.conversation')),
                ('initiator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiator_of', to='corm.member')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_in', to='corm.member')),
            ],
        ),
        migrations.CreateModel(
            name='OpportunityHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.SmallIntegerField(choices=[(-2, 'Rejected'), (-1, 'Declined'), (0, 'Identified'), (1, 'Proposed'), (2, 'Agreed'), (3, 'Submitted'), (4, 'Complete')], default=0)),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('opportunity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='corm.opportunity')),
            ],
        ),
        migrations.AddField(
            model_name='opportunity',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opportunities', to='corm.source'),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.member')),
                ('tags', models.ManyToManyField(blank=True, to='corm.Tag')),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='MemberWatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(auto_now_add=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('level', models.SmallIntegerField(choices=[(10, 'debug'), (20, 'info'), (25, 'success'), (30, 'warning'), (40, 'error')], default=30)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.channel')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.member')),
            ],
        ),
        migrations.CreateModel(
            name='MemberMergeRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('merged_date', models.DateField(auto_now_add=True)),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('merged_with', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.member')),
            ],
        ),
        migrations.CreateModel(
            name='MemberLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.SmallIntegerField(blank=True, choices=[(3, 'Core'), (2, 'Contributor'), (1, 'Participant'), (0, 'Visitor')], default=0, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('conversation_count', models.IntegerField(default=0)),
                ('contribution_count', models.IntegerField(default=0)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborations', to='corm.member')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.project', verbose_name='Segment')),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='connections',
            field=models.ManyToManyField(through='corm.MemberConnection', to='corm.Member'),
        ),
        migrations.AddField(
            model_name='member',
            name='tags',
            field=models.ManyToManyField(blank=True, to='corm.Tag'),
        ),
        migrations.AddField(
            model_name='member',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ManagerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(blank=True, max_length=150, verbose_name='Preferred Name')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Preferred Email')),
                ('tz', models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Etc/GMT', 'Etc/GMT'), ('Etc/GMT+0', 'Etc/GMT+0'), ('Etc/GMT+1', 'Etc/GMT+1'), ('Etc/GMT+10', 'Etc/GMT+10'), ('Etc/GMT+11', 'Etc/GMT+11'), ('Etc/GMT+12', 'Etc/GMT+12'), ('Etc/GMT+2', 'Etc/GMT+2'), ('Etc/GMT+3', 'Etc/GMT+3'), ('Etc/GMT+4', 'Etc/GMT+4'), ('Etc/GMT+5', 'Etc/GMT+5'), ('Etc/GMT+6', 'Etc/GMT+6'), ('Etc/GMT+7', 'Etc/GMT+7'), ('Etc/GMT+8', 'Etc/GMT+8'), ('Etc/GMT+9', 'Etc/GMT+9'), ('Etc/GMT-0', 'Etc/GMT-0'), ('Etc/GMT-1', 'Etc/GMT-1'), ('Etc/GMT-10', 'Etc/GMT-10'), ('Etc/GMT-11', 'Etc/GMT-11'), ('Etc/GMT-12', 'Etc/GMT-12'), ('Etc/GMT-13', 'Etc/GMT-13'), ('Etc/GMT-14', 'Etc/GMT-14'), ('Etc/GMT-2', 'Etc/GMT-2'), ('Etc/GMT-3', 'Etc/GMT-3'), ('Etc/GMT-4', 'Etc/GMT-4'), ('Etc/GMT-5', 'Etc/GMT-5'), ('Etc/GMT-6', 'Etc/GMT-6'), ('Etc/GMT-7', 'Etc/GMT-7'), ('Etc/GMT-8', 'Etc/GMT-8'), ('Etc/GMT-9', 'Etc/GMT-9'), ('Etc/GMT0', 'Etc/GMT0'), ('Etc/Greenwich', 'Etc/Greenwich'), ('Etc/UCT', 'Etc/UCT'), ('Etc/UTC', 'Etc/UTC'), ('Etc/Universal', 'Etc/Universal'), ('Etc/Zulu', 'Etc/Zulu'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu')], default='UTC', max_length=32, verbose_name='Timezone')),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='manager_avatars')),
                ('send_notifications', models.BooleanField(default=True, verbose_name='Send emails')),
                ('secret_key', models.UUIDField(default=uuid.uuid4)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.member', verbose_name='Member Profile')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-last_seen',),
            },
        ),
        migrations.CreateModel(
            name='Insight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('success', 'Success'), ('info', 'Info'), ('warning', 'Warning'), ('danger', 'Danger')], default='info', max_length=20)),
                ('text', models.TextField()),
                ('link', models.CharField(blank=True, max_length=256, null=True)),
                ('cta', models.CharField(blank=True, default='More...', max_length=256, null=True)),
                ('unread', models.BooleanField(db_index=True, default=True)),
                ('uid', models.CharField(max_length=256)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hyperlink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('host', models.CharField(max_length=256)),
                ('path', models.CharField(max_length=512)),
                ('content_type', models.CharField(blank=True, max_length=64, null=True)),
                ('ignored', models.BooleanField(default=False, help_text='Ignore links that are not interesting to you, or are added automatically to conversations.')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
        ),
        migrations.CreateModel(
            name='GiftType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('contents', models.TextField()),
                ('discontinued', models.DateTimeField(blank=True, null=True)),
                ('impact', models.IntegerField(default=0)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
            ],
            options={
                'ordering': ('discontinued', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(blank=True)),
                ('sent_date', models.DateTimeField()),
                ('received_date', models.DateTimeField(blank=True, null=True)),
                ('tracking', models.CharField(blank=True, max_length=512, null=True)),
                ('impact', models.IntegerField(default=0)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('gift_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.gifttype')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.member')),
            ],
            options={
                'ordering': ('-sent_date',),
            },
        ),
        migrations.CreateModel(
            name='EventAttendee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('role', models.CharField(choices=[('guest', 'Guest'), ('host', 'Host'), ('speaker', 'Speaker'), ('staff', 'Staff')], default='guest', max_length=32)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvp', to='corm.event')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendance', to='corm.member')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='promotions',
            field=models.ManyToManyField(blank=True, to='corm.Promotion'),
        ),
        migrations.AddField(
            model_name='event',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source'),
        ),
        migrations.AddField(
            model_name='event',
            name='tag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.tag'),
        ),
        migrations.CreateModel(
            name='EmailRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254)),
                ('category', models.CharField(max_length=128)),
                ('subject', models.CharField(max_length=128)),
                ('body', models.TextField(max_length=1024)),
                ('ok', models.BooleanField(default=True)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recv_messages', to='corm.member')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='conversation',
            name='links',
            field=models.ManyToManyField(to='corm.Hyperlink'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='speaker',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='speaker_in', to='corm.member'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='tags',
            field=models.ManyToManyField(blank=True, to='corm.Tag'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='thread_start',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='corm.conversation'),
        ),
        migrations.AddField(
            model_name='contributiontype',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.source'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.member'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='channel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.channel'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='contribution_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.contributiontype'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='tags',
            field=models.ManyToManyField(blank=True, to='corm.Tag'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.CharField(blank=True, max_length=256, null=True)),
                ('detail', models.CharField(max_length=256)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('avatar_url', models.URLField(blank=True, max_length=512, null=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.member')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source')),
            ],
            options={
                'ordering': ('detail',),
            },
        ),
        migrations.CreateModel(
            name='CompanyDomains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(blank=True, help_text='Email domain names', max_length=256, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='corm.company')),
            ],
            options={
                'verbose_name': 'Company Domain',
                'verbose_name_plural': 'Company Domains',
                'ordering': ('domain',),
            },
        ),
        migrations.AddField(
            model_name='company',
            name='tag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.tag'),
        ),
        migrations.AddField(
            model_name='channel',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source'),
        ),
        migrations.AddField(
            model_name='channel',
            name='tag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corm.tag'),
        ),
        migrations.AddField(
            model_name='activity',
            name='channel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.channel'),
        ),
        migrations.AddField(
            model_name='activity',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.community'),
        ),
        migrations.AddField(
            model_name='activity',
            name='contribution',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.contribution'),
        ),
        migrations.AddField(
            model_name='activity',
            name='conversation',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.conversation'),
        ),
        migrations.AddField(
            model_name='activity',
            name='event_attendance',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corm.eventattendee'),
        ),
        migrations.AddField(
            model_name='activity',
            name='member',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity', to='corm.member'),
        ),
        migrations.AddField(
            model_name='activity',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corm.source'),
        ),
        migrations.AddField(
            model_name='activity',
            name='tags',
            field=models.ManyToManyField(blank=True, to='corm.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('community', 'user')},
        ),
    ]
